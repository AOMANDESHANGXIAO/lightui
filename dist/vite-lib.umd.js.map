{
  "version": 3,
  "file": "vite-lib.umd.js",
  "sources": [
    "../src/packages/button.vue",
    "../src/packages/carousel.vue",
    "../src/packages/col.vue",
    "../src/packages/collapse.vue",
    "../src/packages/collapseItem.vue",
    "../src/components/basic/button.vue",
    "../src/packages/dialog.vue",
    "../src/packages/h.vue",
    "../src/packages/input.vue",
    "../src/packages/link.vue",
    "../src/packages/progress.vue",
    "../src/packages/radio.vue",
    "../src/packages/index.js",
    "../src/packages/radioGroup.vue",
    "../src/packages/row.vue",
    "../src/packages/switch.vue",
    "../src/packages/text.vue"
  ],
  "sourcesContent": [
    "<script setup>\r\nimport { computed } from 'vue'\r\ndefineOptions({\r\n  name: 'lf-button'\r\n})\r\nconst props = defineProps({\r\n  type: {\r\n    type: String,\r\n    default: 'default'\r\n  },\r\n  plain: {\r\n    type: Boolean,\r\n    default: false\r\n  },\r\n  round: {\r\n    type: Boolean,\r\n    default: false\r\n  },\r\n  circle: {\r\n    type: Boolean,\r\n    default: false\r\n  },\r\n  icon: {\r\n    type: String,\r\n    default: ''\r\n  },\r\n  disabled: {\r\n    type: Boolean,\r\n    default: false\r\n  },\r\n  // 是否为文字按钮\r\n  text: {\r\n    type: Boolean,\r\n    default: false\r\n  },\r\n  // 提供加载动画\r\n  loading: {\r\n    type: Boolean,\r\n    default: false\r\n  },\r\n  // 是否需要防抖\r\n  debounce: {\r\n    type: Boolean,\r\n    default: false\r\n  }\r\n})\r\n\r\nconst emits = defineEmits(['click'])\r\n\r\n// 实现防抖功能\r\nconst wait = computed(() => {\r\n  return props.debounce ? 300 : 0\r\n})\r\n\r\nconst debounce_ = (fun, wait) => {\r\n  let timeId\r\n  const newFun = (...args) => {\r\n    clearTimeout(timeId)\r\n    timeId = setTimeout(() => {\r\n      fun(...args)\r\n    }, wait)\r\n  }\r\n  return newFun\r\n}\r\n\r\nconst handleClick = debounce_((e) => {\r\n  if (props.disabled || props.loading) return\r\n  emits('click', e)\r\n}, wait.value)\r\n\r\nconst iconName = computed(() => {\r\n  if (props.icon.endsWith('--left')) {\r\n    // 将末尾的--left去掉\r\n    return props.icon.slice(0, -6)\r\n  } else if (props.icon.endsWith('--right')) {\r\n    return props.icon.slice(0, -7)\r\n  } else {\r\n    return props.icon\r\n  }\r\n})\r\n\r\nconst iconPosition = computed(() => {\r\n  if (props.icon.endsWith('--left')) {\r\n    return 'left'\r\n  } else if (props.icon.endsWith('--right')) {\r\n    return 'right'\r\n  } else {\r\n    return 'left'\r\n  }\r\n})\r\n</script>\r\n\r\n<template>\r\n  <button\r\n    class=\"lf-button\"\r\n    @click=\"handleClick($event)\"\r\n    :class=\"[\r\n      `lf-button--${props.type}`,\r\n      { 'is-plain': props.plain },\r\n      { 'is-round': props.round },\r\n      { 'is-circle': props.circle },\r\n      { 'is-disabled': props.disabled },\r\n      { 'is-text': props.text },\r\n      { 'is-loading': props.loading }\r\n    ]\"\r\n  >\r\n    <!-- 加载动画 -->\r\n    <ul v-if=\"props.loading\" class=\"is-loading\">\r\n      <li class=\"item-1\"></li>\r\n      <li class=\"item-2\"></li>\r\n      <li class=\"item-3\"></li>\r\n    </ul>\r\n    <!-- 放字体图标 -->\r\n    <i :class=\"iconName\" v-if=\"icon && iconPosition === 'left'\"></i>\r\n    <!-- 如果没有传入插槽，则不显示span标签 -->\r\n    <span v-if=\"$slots.default\">\r\n      <!-- 插槽，传递的是文本 -->\r\n      <slot></slot>\r\n    </span>\r\n    <i :class=\"iconName\" v-if=\"icon && iconPosition === 'right'\"></i>\r\n  </button>\r\n</template>\r\n\r\n<style lang=\"scss\" scoped>\r\n@import './assets/styles/button.scss';\r\n</style>\r\n",
    "<script setup>\r\nimport { onMounted, ref } from 'vue'\r\n\r\ndefineOptions({\r\n  name: 'lf-carousel'\r\n})\r\n\r\nconst props = defineProps({\r\n  height: {\r\n    type: String,\r\n    default: '150px'\r\n  },\r\n  initialIndex: {\r\n    type: Number,\r\n    default: 0\r\n  },\r\n  autoplay: {\r\n    type: Boolean,\r\n    default: true\r\n  },\r\n  interval: {\r\n    type: Number,\r\n    default: 3000\r\n  },\r\n  indicatorPosition: {\r\n    type: String,\r\n    default: 'none'\r\n  }\r\n})\r\n\r\n// 查询插槽中包含多少个item\r\nconst length = ref(0)\r\nconst elements = ref([])\r\nconst thisCarousel = ref(null)\r\n\r\nonMounted(() => {\r\n  // 获取本元素内部的子元素\r\n  elements.value = thisCarousel.value.querySelectorAll(`.lf-carousel-item`)\r\n  console.log(elements.value)\r\n  length.value = elements.value.length\r\n  // 给所有的元素添加z-index属性，依次减小\r\n  // 目的是让列表中的第一个元素显示在最上面\r\n  for (let i = 0; i < length.value; i++) {\r\n    elements.value[i].style['z-index'] = length.value - i + 1\r\n    elements.value[i].style['opacity'] = '0'\r\n  }\r\n  elements.value[props.initialIndex].style['opacity'] = '1'\r\n  // 初始化active\r\n  active.value = props.initialIndex\r\n})\r\n\r\n// 设置active\r\nconst active = ref(0)\r\n\r\n// 回调函数 => 更改active.value\r\n// 用户点击左侧和右侧的按钮也可以实现切换\r\n// direction = -1则向左切换\r\nconst changeActive = (direction = 1, trigger = 'auto') => {\r\n  if (trigger === 'auto' && !props.autoplay) {\r\n    return\r\n  }\r\n  setLeaveEffect(active.value)\r\n  active.value = (active.value + direction) % length.value\r\n  if (active.value < 0) {\r\n    active.value = length.value - 1\r\n  }\r\n  setEnterEffect(active.value)\r\n}\r\n\r\n// 设置离开效果\r\nconst setLeaveEffect = (index) => {\r\n  elements.value[index].style['opacity'] = '0'\r\n  elements.value[index].style['z-index'] = '0'\r\n}\r\n\r\n// 设置进入效果\r\nconst setEnterEffect = (index) => {\r\n  // 改变z-index\r\n  elements.value[index].style['z-index'] = '10'\r\n  // 设置淡入淡出效果\r\n  elements.value[index].style['opacity'] = '1'\r\n}\r\n\r\nlet timer = ref(null)\r\nonMounted(() => {\r\n  // 如果设置自动播放为false则跳过设置定时器\r\n  if (!props.autoplay) return\r\n  // 定时器刷新正在显示的\r\n  timer.value = setInterval(() => {\r\n    changeActive()\r\n  }, props.interval)\r\n})\r\n\r\n// 用户触摸走马灯时\r\nconst isTouched = ref(false)\r\n\r\nconst handleTouch = () => {\r\n  // 鼠标放上去时，清除定时器\r\n  if (!isTouched.value) {\r\n    // 原来没放上来，现在放上来\r\n    clearInterval(timer.value)\r\n  } else {\r\n    // 离开了，重新打开定时器\r\n    timer.value = setInterval(() => {\r\n      changeActive()\r\n    }, props.interval)\r\n  }\r\n  isTouched.value = !isTouched.value\r\n}\r\n\r\n// 允许用户通过点击指示器图标切换展示的图片\r\nconst setActiveItem = (index) => {\r\n  setLeaveEffect(active.value)\r\n  active.value = index\r\n  setEnterEffect(active.value)\r\n}\r\n</script>\r\n\r\n<template>\r\n  <section\r\n    class=\"lf-carousel\"\r\n    ref=\"thisCarousel\"\r\n    :style=\"{ height: height }\"\r\n    @mouseenter=\"handleTouch\"\r\n    @mouseleave=\"handleTouch\"\r\n  >\r\n    <slot></slot>\r\n    <!-- 绘制小圆点 -->\r\n    <ul\r\n      class=\"lf-carousel__pointer\"\r\n      v-if=\"indicatorPosition !== 'none'\"\r\n      :class=\"[`lf-carousel__pointer--${indicatorPosition}`]\"\r\n    >\r\n      <li\r\n        class=\"lf-carousel__pointer--item\"\r\n        v-for=\"(item, index) in length\"\r\n        :key=\"item\"\r\n        :class=\"[{ active: active === index }]\"\r\n        @mouseenter=\"setActiveItem(index)\"\r\n      ></li>\r\n    </ul>\r\n    <!-- 绘制左右箭头，以进行切换 -->\r\n    <div\r\n      class=\"lf-carousel__arrow--back\"\r\n      :class=\"[\r\n        { 'is-Touched': isTouched },\r\n        {\r\n          'lf-carousel__arrow--back--top':\r\n            indicatorPosition === 'left' || indicatorPosition === 'right'\r\n        }\r\n      ]\"\r\n      @click=\"changeActive(-1, 'click')\"\r\n    ></div>\r\n    <div\r\n      class=\"lf-carousel__arrow--go\"\r\n      :class=\"[\r\n        { 'is-Touched': isTouched },\r\n        {\r\n          'lf-carousel__arrow--go--bottom':\r\n            indicatorPosition === 'left' || indicatorPosition === 'right'\r\n        }\r\n      ]\"\r\n      @click=\"changeActive(1, 'click')\"\r\n    ></div>\r\n  </section>\r\n</template>\r\n\r\n<style lang=\"scss\" scoped>\r\n@import './assets/styles/common.scss';\r\n.lf-carousel {\r\n  position: relative;\r\n  display: flex;\r\n  justify-content: center;\r\n  width: 100%;\r\n  border-radius: 10px;\r\n  overflow: hidden;\r\n}\r\n\r\n.lf-carousel__pointer {\r\n  position: absolute;\r\n  display: flex;\r\n  // bottom: 10%;\r\n  gap: 10px;\r\n  background-color: rgba(#fff, 0.3);\r\n  backdrop-filter: blur(10px);\r\n  padding: 5px;\r\n  border-radius: 8px;\r\n  z-index: 100;\r\n  .lf-carousel__pointer--item {\r\n    width: 10px;\r\n    height: 10px;\r\n    border-radius: 50%;\r\n    background-color: #fff;\r\n    cursor: pointer;\r\n    transition: all 0.2s;\r\n  }\r\n  .lf-carousel__pointer--item.active {\r\n    background-color: $theme-color;\r\n    box-shadow: 0 0 0 1px #fff;\r\n  }\r\n}\r\n.lf-carousel__pointer.lf-carousel__pointer--top {\r\n  // 指示器放在上方\r\n  top: 10%;\r\n}\r\n.lf-carousel__pointer.lf-carousel__pointer--bottom {\r\n  bottom: 10%;\r\n}\r\n.lf-carousel__pointer.lf-carousel__pointer--left {\r\n  left: 5%;\r\n  top: 50%;\r\n  transform: translateY(-50%);\r\n  flex-direction: column;\r\n}\r\n.lf-carousel__pointer.lf-carousel__pointer--right {\r\n  right: 5%;\r\n  top: 50%;\r\n  transform: translateY(-50%);\r\n  flex-direction: column;\r\n}\r\n[class*='lf-carousel__arrow'] {\r\n  position: absolute;\r\n  z-index: 100;\r\n  background-color: rgba($theme-color, 0);\r\n  width: 30px;\r\n  height: 30px;\r\n  border-radius: 50%;\r\n  // top: 50%;\r\n  cursor: pointer;\r\n  transition: all 0.4s;\r\n  opacity: 0;\r\n}\r\n.is-Touched[class*='lf-carousel__arrow'] {\r\n  background-color: rgba($theme-color, 0.6);\r\n  opacity: 1;\r\n  &:hover {\r\n    background-color: rgba($theme-color, 1);\r\n  }\r\n}\r\n[class*='lf-carousel__arrow']::after {\r\n  display: block;\r\n  content: '';\r\n  position: absolute;\r\n  width: 0;\r\n  height: 0;\r\n  border-left: 8px solid transparent;\r\n  border-right: 8px solid transparent;\r\n  border-top: 10px solid rgba(#fff, 1); /* 箭头颜色 */\r\n}\r\n.lf-carousel__arrow--back {\r\n  top: 50%;\r\n  left: 5px;\r\n  transform: translateY(-50%);\r\n}\r\n.lf-carousel__arrow--back::after {\r\n  margin-left: 50%;\r\n  margin-top: 50%;\r\n  transform: translateX(-50%) translateY(-50%) rotate(90deg);\r\n}\r\n.lf-carousel__arrow--back--top {\r\n  left: 50%;\r\n  top: 10px;\r\n  transform: translateX(-50%);\r\n}\r\n.lf-carousel__arrow--back--top::after {\r\n  // 向上指\r\n  border-left: 8px solid transparent;\r\n  border-right: 8px solid transparent;\r\n  border-top: 0; /* 箭头顶部边框透明 */\r\n  border-bottom: 10px solid rgba(#fff, 1); /* 箭头底部边框（即向上箭头的尖端）颜色 */\r\n\r\n  margin-left: 50%;\r\n  transform: translateX(-50%) translateY(-75%);\r\n}\r\n\r\n.lf-carousel__arrow--go {\r\n  bottom: 50%;\r\n  right: 5px;\r\n  transform: translateY(50%);\r\n}\r\n.lf-carousel__arrow--go--bottom {\r\n  left: 50%;\r\n  // top: 0%;\r\n  bottom: 10px;\r\n  transform: translateX(-50%);\r\n}\r\n.lf-carousel__arrow--go::after {\r\n  margin-left: 50%;\r\n  margin-top: 50%;\r\n  transform: translateX(-50%) translateY(-50%) rotate(-90deg);\r\n}\r\n.lf-carousel__arrow--go--bottom::after {\r\n  transform: rotate(0deg) translateX(-50%) translateY(-25%);\r\n}\r\n</style>\r\n",
    "<script setup>\r\nimport { inject, computed } from 'vue'\r\n\r\ndefineOptions({\r\n  name: 'lf-col'\r\n})\r\n\r\nconst props = defineProps({\r\n  span: {\r\n    type: Number,\r\n    default: 0\r\n  },\r\n  offset: {\r\n    type: Number,\r\n    default: 0\r\n  }\r\n})\r\n\r\nconst align = inject('align')\r\n\r\nconst align_items = computed(() => {\r\n  const align_list = ['middle', 'top', 'bottom']\r\n  if (align_list.includes(align.value)) {\r\n    if (align.value === 'middle') {\r\n      return 'center'\r\n    }\r\n    if (align.value === 'top') {\r\n      return 'flex-start'\r\n    }\r\n    if (align.value === 'bottom') {\r\n      return 'flex-end'\r\n    }\r\n  }\r\n  return 'flex-start'\r\n})\r\n</script>\r\n\r\n<template>\r\n  <div\r\n    class=\"lf-col\"\r\n    :style=\"{\r\n      width: `${(props.span / 24) * 100}%`,\r\n      'margin-left': `${(offset / 24) * 100}%`,\r\n      'align-items': align_items\r\n    }\"\r\n  >\r\n    <slot></slot>\r\n  </div>\r\n</template>\r\n\r\n<style lang=\"scss\" scoped>\r\n.lf-col {\r\n  height: 100%;\r\n  display: flex;\r\n}\r\n</style>\r\n",
    "<script setup>\r\nimport { ref, provide } from 'vue'\r\n\r\ndefineOptions({\r\n  name: 'lf-collapse'\r\n})\r\n\r\nconst props = defineProps({\r\n  modelValue: {\r\n    type: [String, Number],\r\n    default: null\r\n  },\r\n  accordion: {\r\n    type: Boolean,\r\n    default: false\r\n  }\r\n})\r\n\r\nconst collapse = ref(null)\r\nconst emits = defineEmits(['update:modelValue'])\r\n\r\n// 传递一个方法\r\nconst changeActive = (newActive) => {\r\n  // console.log('commits...', newActive)\r\n  activeName_.value = newActive\r\n  emits('update:modelValue', newActive)\r\n}\r\n\r\nconst activeName_ = ref(props.modelValue)\r\nconst accordion_ = ref(props.accordion)\r\nprovide('changeActive', changeActive)\r\nprovide('activeName', activeName_)\r\nprovide('accordion', accordion_)\r\n</script>\r\n\r\n<template>\r\n  <section class=\"lf-collapse\" ref=\"collapse\">\r\n    <!-- 提供一个插槽,用于放置collapse item -->\r\n    <slot></slot>\r\n  </section>\r\n</template>\r\n\r\n<style lang=\"scss\" scoped>\r\n@import './assets/styles/common.scss';\r\n.lf-collapse {\r\n  width: 100%;\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 0px;\r\n  border-bottom: 1px solid $lf-border-color;\r\n  transition: all 0.4s;\r\n}\r\n</style>\r\n",
    "<script setup>\r\nimport { ref, onMounted, inject, computed } from 'vue'\r\n\r\ndefineOptions({\r\n  name: 'lf-collapse-item'\r\n})\r\nconst props = defineProps({\r\n  title: {\r\n    type: String,\r\n    default: ''\r\n  },\r\n  name: {\r\n    type: [String, Number],\r\n    default: ''\r\n  }\r\n})\r\nconst changeActive = inject('changeActive')\r\nconst activeName = inject('activeName')\r\nconst accordion = inject('accordion')\r\n\r\nconst content = ref(null)\r\n// 当采用非手风琴效果时，各个组件之间互不影响\r\nconst active_not_accordion = ref(false)\r\n// 标记是否活跃，未折叠\r\nconst active = computed(() => {\r\n  // 非手风琴模式\r\n  if (!accordion.value) {\r\n    return active_not_accordion.value\r\n  }\r\n  return props.name === activeName.value\r\n})\r\n\r\nconst handleFold = () => {\r\n  // 非手风琴模式\r\n  if (!accordion.value) {\r\n    active_not_accordion.value = !active_not_accordion.value\r\n  } else {\r\n    // 如自己已经活跃，将活跃的item名设置为null\r\n    if (activeName.value === props.name) {\r\n      changeActive(null)\r\n    } else {\r\n      changeActive(props.name)\r\n    }\r\n  }\r\n}\r\n\r\nconst h = ref('')\r\n\r\nonMounted(() => {\r\n  // 非手风琴时，将name === activeName的组件的active_not_accordition初始标记为true\r\n  if (!accordion.value) {\r\n    active_not_accordion.value = props.name === activeName.value\r\n  }\r\n  content.value.style.height = 'auto'\r\n  content.value.style['height'] = content.value.offsetHeight + 'px'\r\n  h.value = content.value.offsetHeight + 'px'\r\n  content.value.style.height = '0px'\r\n})\r\n</script>\r\n\r\n<template>\r\n  <section class=\"lf-collapse-item\" :name=\"name\">\r\n    <header class=\"lf-collapse-item__header\" @click=\"handleFold\">\r\n      <slot name=\"title\">\r\n        <span>{{ title }}</span></slot\r\n      >\r\n      <svg\r\n        t=\"1711189173429\"\r\n        class=\"icon lf-collapse-item__header--arrow\"\r\n        :class=\"{ 'lf-collapse-item__header--arrow--isfolded': !active }\"\r\n        viewBox=\"0 0 1024 1024\"\r\n        version=\"1.1\"\r\n        xmlns=\"http://www.w3.org/2000/svg\"\r\n        p-id=\"4244\"\r\n        width=\"20\"\r\n        height=\"20\"\r\n      >\r\n        <path\r\n          d=\"M301.568 536.32c-7.168 0-14.336-2.816-19.968-8.192-11.008-11.008-11.008-28.928 0-39.936L702.464 67.584c11.008-11.008 28.928-11.008 39.936 0 11.008 11.008 11.008 28.928 0 39.936L321.536 528.128c-5.376 5.376-12.8 8.192-19.968 8.192z\"\r\n          p-id=\"4245\"\r\n          fill=\"#dbdbdb\"\r\n        ></path>\r\n        <path\r\n          d=\"M722.432 964.864c-7.168 0-14.336-2.816-19.968-8.192L281.6 535.808c-11.008-11.008-11.008-28.928 0-39.936 11.008-11.008 28.928-11.008 39.936 0L742.4 916.736c11.008 11.008 11.008 28.928 0 39.936-5.632 5.376-12.8 8.192-19.968 8.192z\"\r\n          p-id=\"4246\"\r\n          fill=\"#dbdbdb\"\r\n        ></path>\r\n      </svg>\r\n    </header>\r\n    <main\r\n      class=\"lf-collapse-item__content\"\r\n      ref=\"content\"\r\n      :name=\"name\"\r\n      :style=\"{ height: !active ? '0px' : h }\"\r\n    >\r\n      <section class=\"lf-collapse-item__content--slot\">\r\n        <slot></slot>\r\n      </section>\r\n    </main>\r\n  </section>\r\n</template>\r\n\r\n<style lang=\"scss\" scoped>\r\n@import './assets/styles/common.scss';\r\n.lf-collapse-item {\r\n  border-top: 1px solid $lf-border-color;\r\n}\r\n.lf-collapse-item__header {\r\n  padding: 10px 0;\r\n  font-size: 13px;\r\n  color: $lf-text-color;\r\n  font-weight: 700;\r\n  cursor: pointer;\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n}\r\n// 箭头\r\n.lf-collapse-item__header--arrow {\r\n  transition: all 0.4s;\r\n  transform-origin: center;\r\n  transform: rotate(-90deg);\r\n}\r\n.lf-collapse-item__header--arrow--isfolded {\r\n  transform: rotate(-180deg);\r\n}\r\n.lf-collapse-item__content {\r\n  transition: all 0.4s;\r\n  overflow: hidden;\r\n}\r\n.lf-collapse-item__content--isFolded {\r\n  // transition: all 0.4s;\r\n  height: 0px;\r\n}\r\n.lf-collapse-item__content--slot {\r\n  padding-top: 10px;\r\n  padding-bottom: 30px;\r\n  font-size: 13px;\r\n  color: $lf-text-color;\r\n  font-weight: 500;\r\n}\r\n</style>\r\n",
    "<script setup>\r\nimport { computed } from 'vue'\r\ndefineOptions({\r\n  name: 'lf-button'\r\n})\r\nconst props = defineProps({\r\n  type: {\r\n    type: String,\r\n    default: 'default'\r\n  },\r\n  plain: {\r\n    type: Boolean,\r\n    default: false\r\n  },\r\n  round: {\r\n    type: Boolean,\r\n    default: false\r\n  },\r\n  circle: {\r\n    type: Boolean,\r\n    default: false\r\n  },\r\n  icon: {\r\n    type: String,\r\n    default: ''\r\n  },\r\n  disabled: {\r\n    type: Boolean,\r\n    default: false\r\n  },\r\n  // 是否为文字按钮\r\n  text: {\r\n    type: Boolean,\r\n    default: false\r\n  },\r\n  // 提供加载动画\r\n  loading: {\r\n    type: Boolean,\r\n    default: false\r\n  },\r\n  // 是否需要防抖\r\n  debounce: {\r\n    type: Boolean,\r\n    default: false\r\n  }\r\n})\r\n\r\nconst emits = defineEmits(['click'])\r\n\r\n// 实现防抖功能\r\nconst wait = computed(() => {\r\n  return props.debounce ? 300 : 0\r\n})\r\n\r\nconst debounce_ = (fun, wait) => {\r\n  let timeId\r\n  const newFun = (...args) => {\r\n    clearTimeout(timeId)\r\n    timeId = setTimeout(() => {\r\n      fun(...args)\r\n    }, wait)\r\n  }\r\n  return newFun\r\n}\r\n\r\nconst handleClick = debounce_((e) => {\r\n  if (props.disabled || props.loading) return\r\n  emits('click', e)\r\n}, wait.value)\r\n\r\nconst iconName = computed(() => {\r\n  if (props.icon.endsWith('--left')) {\r\n    // 将末尾的--left去掉\r\n    return props.icon.slice(0, -6)\r\n  } else if (props.icon.endsWith('--right')) {\r\n    return props.icon.slice(0, -7)\r\n  } else {\r\n    return props.icon\r\n  }\r\n})\r\n\r\nconst iconPosition = computed(() => {\r\n  if (props.icon.endsWith('--left')) {\r\n    return 'left'\r\n  } else if (props.icon.endsWith('--right')) {\r\n    return 'right'\r\n  } else {\r\n    return 'left'\r\n  }\r\n})\r\n</script>\r\n\r\n<template>\r\n  <button\r\n    class=\"lf-button\"\r\n    @click=\"handleClick($event)\"\r\n    :class=\"[\r\n      `lf-button--${props.type}`,\r\n      { 'is-plain': props.plain },\r\n      { 'is-round': props.round },\r\n      { 'is-circle': props.circle },\r\n      { 'is-disabled': props.disabled },\r\n      { 'is-text': props.text },\r\n      { 'is-loading': props.loading }\r\n    ]\"\r\n  >\r\n    <!-- 加载动画 -->\r\n    <ul v-if=\"props.loading\" class=\"is-loading\">\r\n      <li class=\"item-1\"></li>\r\n      <li class=\"item-2\"></li>\r\n      <li class=\"item-3\"></li>\r\n    </ul>\r\n    <!-- 放字体图标 -->\r\n    <i :class=\"iconName\" v-if=\"icon && iconPosition === 'left'\"></i>\r\n    <!-- 如果没有传入插槽，则不显示span标签 -->\r\n    <span v-if=\"$slots.default\">\r\n      <!-- 插槽，传递的是文本 -->\r\n      <slot></slot>\r\n    </span>\r\n    <i :class=\"iconName\" v-if=\"icon && iconPosition === 'right'\"></i>\r\n  </button>\r\n</template>\r\n\r\n<style lang=\"scss\" scoped>\r\n@import '@/assets/styles/button.scss';\r\n</style>\r\n",
    "<script setup>\r\nimport lfButton from '@/components/basic/button.vue'\r\nimport { watch, ref } from 'vue'\r\n\r\ndefineOptions({\r\n  name: 'lf-dialog'\r\n})\r\n\r\nconst emits = defineEmits(['update:modelValue', 'close', 'open'])\r\n\r\nconst props = defineProps({\r\n  // v-model的默认值，可以通过该值实现双向绑定\r\n  modelValue: {\r\n    type: Boolean,\r\n    default: true\r\n  },\r\n  'background-color': {\r\n    type: String,\r\n    default: 'white'\r\n  },\r\n  title: {\r\n    type: String,\r\n    default: 'Tips'\r\n  },\r\n  width: {\r\n    type: String,\r\n    default: '500px'\r\n  },\r\n  top: {\r\n    type: String,\r\n    default: '15vh'\r\n  },\r\n  'show-close': {\r\n    type: Boolean,\r\n    default: true\r\n  },\r\n  draggable: {\r\n    type: Boolean,\r\n    default: false\r\n  }\r\n})\r\n\r\nconst handleClose = () => {\r\n  emits('update:modelValue', false)\r\n  // 传递一个事件，方便回调\r\n  emits('close')\r\n}\r\n\r\nconst handleOpen = () => {\r\n  emits('open')\r\n}\r\n\r\nconst lfDialog = ref(null)\r\n\r\nwatch(\r\n  () => props.modelValue,\r\n  (newValue) => {\r\n    if (newValue) {\r\n      handleOpen()\r\n    }\r\n  }\r\n)\r\n\r\n// 实现对话框拖拽功能\r\nconst dialog = ref(null)\r\n\r\nconst originalPosition = ref({ top: 0, left: 0 })\r\n\r\n// 定义一个 ref 用于保存鼠标点击位置相对于对话框左上角的位置\r\nconst dragOffset = ref({ top: 0, left: 0 })\r\n\r\nconst startDragging = (event) => {\r\n  if (!props.draggable) return\r\n  // 记录下对话框的原始 top 和 left 值\r\n  originalPosition.value = { top: dialog.value.offsetTop, left: dialog.value.offsetLeft }\r\n\r\n  // 记录下鼠标点击位置相对于对话框左上角的位置\r\n  dragOffset.value = {\r\n    top: event.clientY - dialog.value.offsetTop,\r\n    left: event.clientX - dialog.value.offsetLeft\r\n  }\r\n\r\n  // 添加鼠标移动和释放事件监听器\r\n  document.addEventListener('mousemove', drag)\r\n  document.addEventListener('mouseup', stopDragging)\r\n}\r\n\r\nconst drag = (event) => {\r\n  originalPosition.value = { top: dialog.value.offsetTop, left: dialog.value.offsetLeft }\r\n\r\n  // 记录下鼠标点击位置相对于对话框左上角的位置\r\n  dialog.value.style.top = event.clientY - dragOffset.value.top + 'px'\r\n  dialog.value.style.left = event.clientX - dragOffset.value.left + 'px'\r\n}\r\n\r\nconst stopDragging = () => {\r\n  document.removeEventListener('mousemove', drag)\r\n  document.removeEventListener('mouseup', stopDragging)\r\n}\r\n</script>\r\n\r\n<template>\r\n  <Transition>\r\n    <!-- .self修饰符表示点击自身触发事件 -->\r\n    <div v-if=\"props.modelValue\" class=\"lf-overlay-dialog\" @click.self=\"handleClose\" ref=\"lfDialog\">\r\n      <section\r\n        class=\"lf-dialog\"\r\n        :style=\"`width:${width};top:${top};background-color:${backgroundColor}`\"\r\n        ref=\"dialog\"\r\n      >\r\n        <span class=\"lf-dialog-close\" @click=\"handleClose\" v-if=\"showClose\">X</span>\r\n        <header\r\n          class=\"lf-dialog-header\"\r\n          @mousedown=\"startDragging\"\r\n          :class=\"{ 'is-draggable': props.draggable }\"\r\n        >\r\n          <!-- 直接直接传title，或者传一个组件进来 -->\r\n          <slot name=\"title\">\r\n            <span>{{ title }}</span>\r\n          </slot>\r\n        </header>\r\n        <!-- 传递消息 -->\r\n        <span class=\"lf-dialog-message\">\r\n          <slot></slot>\r\n        </span>\r\n        <!-- 支持底部传按钮 -->\r\n        <slot name=\"footer\">\r\n          <section class=\"lf-dialog-footer\">\r\n            <lf-button @click=\"handleClose\">cancle</lf-button>\r\n            <lf-button type=\"primary\" @click=\"handleClose\">confirm</lf-button>\r\n          </section>\r\n        </slot>\r\n      </section>\r\n    </div>\r\n  </Transition>\r\n</template>\r\n\r\n<style lang=\"scss\" scoped>\r\n@import './assets/styles/dialog.scss';\r\n</style>\r\n",
    "<script setup>\r\nimport { computed } from 'vue'\r\n\r\ndefineOptions({\r\n  name: 'lf-h'\r\n})\r\n\r\nconst props = defineProps({\r\n  size: {\r\n    type: String,\r\n    default: 'normal'\r\n  },\r\n  decorate: {\r\n    type: Boolean,\r\n    default: true\r\n  },\r\n  linearColor: {\r\n    type: Array,\r\n    default: null\r\n  }\r\n})\r\nconst colorStr = computed(() => {\r\n  if (!props.linearColor) return ''\r\n  let color_str = ''\r\n  props.linearColor.forEach((item) => {\r\n    color_str += `${item},`\r\n  })\r\n  // -webkit-linear-gradient(right, $theme-color, $success-color)\r\n  return `-webkit-linear-gradient(right, ${color_str.substring(0, color_str.length - 1)})`\r\n})\r\nconst styles = computed(() => {\r\n  if (colorStr.value) {\r\n    return {\r\n      background: colorStr.value,\r\n      '-webkit-background-clip': 'text',\r\n      'background-clip': 'text',\r\n      '-webkit-text-fill-color': 'transparent'\r\n    }\r\n  } else {\r\n    return ''\r\n  }\r\n})\r\n</script>\r\n\r\n<template>\r\n  <div>\r\n    <h1 class=\"lf-h\" :class=\"[`lf-h--${props.size}`, { 'is-decorated': decorate }]\" :style=\"styles\">\r\n      <slot></slot>\r\n    </h1>\r\n  </div>\r\n</template>\r\n\r\n<style lang=\"scss\" scoped>\r\n@import './assets/styles/common.scss';\r\n.lf-h {\r\n  color: $lf-text-color;\r\n  padding: 5px;\r\n  display: inline-flex;\r\n  width: auto;\r\n  align-items: center;\r\n  justify-content: flex-start;\r\n}\r\n.lf-h--normal {\r\n  font-size: $lf-normal-title-font-size;\r\n}\r\n.lf-h--small {\r\n  font-size: $lf-small-title-font-size;\r\n}\r\n.lf-h--large {\r\n  font-size: $lf-large-title-font-size;\r\n}\r\n\r\n.lf-h.is-decorated {\r\n  &::before {\r\n    // position: absolute;\r\n    content: '';\r\n    // left: 0;\r\n    // top: 0;\r\n    width: 6px;\r\n\r\n    margin-right: 15px;\r\n    background-color: $theme-color;\r\n  }\r\n}\r\n.is-decorated.lf-h--normal::before {\r\n  height: 28px;\r\n}\r\n.is-decorated.lf-h--small::before {\r\n  height: 18px;\r\n}\r\n.is-decorated.lf-h--large::before {\r\n  height: 48px;\r\n}\r\n</style>\r\n",
    "<script setup>\r\nimport { ref, computed } from 'vue'\r\n\r\ndefineOptions({\r\n  name: 'lf-input'\r\n})\r\n\r\nconst props = defineProps({\r\n  type: {\r\n    type: String,\r\n    default: 'text'\r\n  },\r\n  placeholder: {\r\n    type: String,\r\n    default: 'Please Input'\r\n  },\r\n  name: {\r\n    type: String,\r\n    default: ''\r\n  },\r\n  modelValue: {\r\n    type: String,\r\n    default: ''\r\n  },\r\n  clearable: {\r\n    type: Boolean,\r\n    default: false\r\n  },\r\n  disabled: {\r\n    type: Boolean,\r\n    default: false\r\n  },\r\n  showPassword: {\r\n    type: Boolean,\r\n    default: false\r\n  },\r\n  // 带图标的输入框，前缀输入框\r\n  prefixIcon: {\r\n    type: String,\r\n    default: ''\r\n  },\r\n  suffixIcon: {\r\n    type: String,\r\n    default: ''\r\n  },\r\n  width: {\r\n    type: String,\r\n    default: '180px'\r\n  },\r\n  // textarea文本域专属参数\r\n  autoSize: {\r\n    type: Object,\r\n    default: {}\r\n  }\r\n})\r\n\r\nconst emits = defineEmits(['change', 'update:modelValue', 'focus', 'blur'])\r\n// 实现v-model绑定数据\r\nconst handleInput = (e) => {\r\n  emits('update:modelValue', e.target.value)\r\n}\r\n\r\n// 实现一键清空数据\r\nconst inputFocus = ref(false)\r\nconst isFocus = ref(false)\r\n\r\nconst makeFocus = () => {\r\n  isFocus.value = true\r\n}\r\n\r\nconst makeNoFocus = () => {\r\n  isFocus.value = inputFocus.value ? true : false\r\n}\r\nconst handleClear = (event) => {\r\n  // console.log('???')\r\n  // event.preventDefault()\r\n  if (event.button !== 0) return\r\n  emits('update:modelValue', '')\r\n}\r\n\r\nconst handleFocus = (e) => {\r\n  inputFocus.value = true\r\n  emits('focus', e)\r\n}\r\n\r\nconst handleBlur = (e) => {\r\n  // console.log('失去焦点')\r\n  inputFocus.value = false\r\n  isFocus.value = false\r\n  emits('blur', e)\r\n}\r\n\r\n// 实现密码框的显示和隐藏\r\nconst passwordVisible = ref(false)\r\n\r\nconst handlePassword = (event) => {\r\n  if (event.button !== 0) return\r\n  passwordVisible.value = !passwordVisible.value\r\n  // console.log(props.showPassword)\r\n}\r\n\r\n// 每添加一个后缀图标，为input增加10px的右侧内边距\r\nconst paddingRight = computed(() => {\r\n  let right = 14\r\n  // console.log(props.suffixIcon !== '')\r\n  // console.log('0', props.suffixIcon)\r\n  if (props.clearable && isFocus.value) {\r\n    // console.log(1)\r\n    right += 15\r\n  }\r\n  if (props.showPassword && isFocus.value) {\r\n    // console.log(2)\r\n    right += 15\r\n  }\r\n  if (props.suffixIcon !== '') {\r\n    // console.log(3)\r\n    right += 15\r\n  }\r\n  return right + 'px'\r\n})\r\n\r\n// textarea\r\nconst textarea = ref(null)\r\n\r\n// 防抖\r\nfunction debounce_(fun, wait) {\r\n  let timerId\r\n  return function (...args) {\r\n    clearTimeout(timerId)\r\n    timerId = setTimeout(() => {\r\n      fun(...args)\r\n    }, wait)\r\n  }\r\n}\r\n\r\n// 计算最小的高度\r\nconst minHeight = computed(() => {\r\n  if (Object.keys(props.autoSize).length === 0) return '25px'\r\n  const min = props.autoSize.minRows * 16\r\n  return min\r\n})\r\n\r\nconst handleAutoSize = debounce_((e) => {\r\n  // console.log('0', props.autoSize)\r\n  // console.log(Boolean(props.autoSize))\r\n  if (Object.keys(props.autoSize).length === 0) return\r\n  textarea.value.style.height = '25px'\r\n  const maxHeight = props.autoSize.maxRows * 16\r\n  const newHeight = e.target.scrollHeight - 20\r\n  // console.log('maxHeight', maxHeight)\r\n  // console.log('newHeight', newHeight)\r\n  // console.log('================')\r\n  textarea.value.style.height = Math.min(newHeight, maxHeight) + 'px'\r\n}, 300)\r\n\r\nconst handleTextarea = (e) => {\r\n  emits('update:modelValue', e.target.value)\r\n  handleAutoSize(e)\r\n}\r\n</script>\r\n\r\n<template>\r\n  <section class=\"lf-input-container__input\" :style=\"`width:${width}`\" v-if=\"type !== 'textarea'\">\r\n    <input\r\n      :class=\"[{ 'lf-input-prefix__icon': prefixIcon }, { 'lf-input-suffix__icon': suffixIcon }]\"\r\n      :type=\"passwordVisible ? (showPassword ? 'password' : 'text') : type\"\r\n      class=\"lf-input\"\r\n      :value=\"props.modelValue\"\r\n      :placeholder=\"props.placeholder\"\r\n      :name=\"props.name\"\r\n      @input=\"handleInput($event)\"\r\n      @focus=\"handleFocus($event)\"\r\n      @blur=\"handleBlur($event)\"\r\n      @mouseenter=\"makeFocus\"\r\n      @mouseleave=\"makeNoFocus\"\r\n      :style=\"`padding-right:${paddingRight};`\"\r\n    />\r\n    <!-- 前缀图标 -->\r\n    <span class=\"lf-input-prefix-icon\" v-if=\"prefixIcon\">\r\n      <i :class=\"`lf-icon-${prefixIcon}`\"></i>\r\n    </span>\r\n    <span class=\"lf-input-suffix\">\r\n      <!-- 后缀图标 -->\r\n      <span class=\"lf-input-suffix-icon\" v-if=\"suffixIcon\">\r\n        <i :class=\"`lf-icon-${suffixIcon}`\"></i>\r\n      </span>\r\n      <span\r\n        class=\"lf-icon-guanbi lf-input-icon\"\r\n        v-if=\"clearable && modelValue && isFocus\"\r\n        @mousedown.prevent=\"handleClear($event)\"\r\n        @mouseenter=\"makeFocus\"\r\n      ></span>\r\n      <span\r\n        class=\"lf-icon-liulan lf-input-icon\"\r\n        v-if=\"showPassword && modelValue\"\r\n        style=\"font-size: 18px\"\r\n        @mousedown.prevent=\"handlePassword($event)\"\r\n        @mouseenter=\"makeFocus\"\r\n      ></span>\r\n    </span>\r\n  </section>\r\n  <section class=\"lf-input-container__textarea\" :style=\"`width:${width}`\" v-else>\r\n    <textarea\r\n      ref=\"textarea\"\r\n      class=\"lf-textarea\"\r\n      :value=\"props.modelValue\"\r\n      :placeholder=\"props.placeholder\"\r\n      :name=\"props.name\"\r\n      @input=\"handleTextarea($event)\"\r\n      :style=\"{ minHeight: minHeight }\"\r\n    />\r\n  </section>\r\n</template>\r\n\r\n<style lang=\"scss\" scoped>\r\n@import './assets/styles/common.scss';\r\n$lf-input-bg-color: #ffffff;\r\n// 去掉小研究提示\r\ninput[type='password']::-ms-reveal,\r\ninput[type='password']::-ms-clear {\r\n  display: none;\r\n}\r\n.lf-input-container__input {\r\n  position: relative;\r\n  display: inline-flex;\r\n  align-items: center;\r\n  .lf-input {\r\n    box-sizing: border-box;\r\n    display: inline-flex;\r\n    // width: 580px;\r\n    width: 100%;\r\n    justify-content: center;\r\n    align-items: center;\r\n    height: 25px;\r\n    padding: 1px 11px;\r\n    background-color: $lf-input-bg-color;\r\n    cursor: text;\r\n    border: 1px solid $lf-border-color;\r\n    border-radius: 5px;\r\n    color: $lf-text-color;\r\n    font-size: 14px;\r\n    transition: all 0.6s;\r\n    &:focus {\r\n      outline: none;\r\n      border-color: $theme-color;\r\n      box-shadow: 0 0 0 1px rgba($theme-color, 0.5);\r\n    }\r\n    &:hover {\r\n      border-color: #c0c4cc;\r\n    }\r\n    &::placeholder {\r\n      color: #a8abb2;\r\n    }\r\n  }\r\n\r\n  // 有前缀图标时，预留30px的左内边距\r\n  .lf-input.lf-input-prefix__icon {\r\n    padding-left: 30px;\r\n  }\r\n  // 有后缀图标时，预留30px的右内边距\r\n  .lf-input.lf-input-suffix__icon {\r\n    padding-right: 30px;\r\n  }\r\n  // 图标\r\n  .lf-input-suffix {\r\n    position: absolute;\r\n    right: 5%;\r\n    display: flex;\r\n    align-items: center;\r\n    .lf-input-icon {\r\n      font-size: 12px;\r\n      font-weight: 100;\r\n      color: #a8abb2;\r\n      &:hover {\r\n        cursor: pointer;\r\n        color: $theme-color;\r\n      }\r\n    }\r\n  }\r\n\r\n  // 前缀图标\r\n  .lf-input-prefix-icon {\r\n    position: absolute;\r\n    left: 0;\r\n    margin-left: 10px;\r\n    // font-size: 28px;\r\n    [class*='lf-icon'] {\r\n      font-size: 19px;\r\n      color: #a8abb2;\r\n    }\r\n  }\r\n  // 后缀图标\r\n  .lf-input-suffix-icon {\r\n    // position: absolute;\r\n    // right: 0;\r\n    // margin-right: 10px;\r\n    // font-size: 28px;\r\n    [class*='lf-icon'] {\r\n      font-size: 19px;\r\n      color: #a8abb2;\r\n    }\r\n  }\r\n}\r\n.lf-input-container__textarea {\r\n  position: relative;\r\n  display: inline-flex;\r\n  align-items: center;\r\n  height: 25px;\r\n  .lf-textarea {\r\n    width: 100%;\r\n    padding: 10px;\r\n    background-color: $lf-input-bg-color;\r\n    border: 1px solid $lf-border-color;\r\n    border-radius: 5px;\r\n    color: $lf-text-color;\r\n    font-size: 14px;\r\n    line-height: 16px;\r\n    transition:\r\n      border 0.6s,\r\n      box-shadow 0.6s;\r\n    &:focus {\r\n      outline: none;\r\n      border-color: $theme-color;\r\n      box-shadow: 0 0 0 1px rgba($theme-color, 0.5);\r\n    }\r\n    &:hover {\r\n      border-color: #c0c4cc;\r\n    }\r\n    &::placeholder {\r\n      color: #a8abb2;\r\n    }\r\n  }\r\n}\r\n</style>\r\n",
    "<script setup>\r\ndefineOptions({\r\n  name: 'lf-link'\r\n})\r\n\r\nconst props = defineProps({\r\n  href: {\r\n    type: String,\r\n    default: ''\r\n  },\r\n  target: {\r\n    type: String,\r\n    default: '_self'\r\n  },\r\n  type: {\r\n    type: String,\r\n    default: ''\r\n  },\r\n  disabled: {\r\n    type: Boolean,\r\n    default: false\r\n  },\r\n  underline: {\r\n    type: Boolean,\r\n    default: true\r\n  }\r\n})\r\n</script>\r\n\r\n<template>\r\n  <div\r\n    class=\"lf-link\"\r\n    :class=\"[`lf-link--${type}`, { 'is-disabled': disabled }, { 'is-no-underline': !underline }]\"\r\n  >\r\n    <a :href=\"props.href\" :target=\"target\"><slot></slot></a>\r\n  </div>\r\n</template>\r\n\r\n<style lang=\"scss\" scoped>\r\n@import './assets/styles/common.scss';\r\n$lf-link-font-size: 14px;\r\n$lf-link-lighten-amount: 10%;\r\n$lf-link-font-weight: 300;\r\n.lf-link {\r\n  display: inline-block;\r\n  position: relative;\r\n  a {\r\n    color: $lf-text-color;\r\n    text-decoration: none;\r\n    font-size: $lf-link-font-size;\r\n    font-weight: $lf-link-font-weight;\r\n    &:hover {\r\n      text-decoration: underline;\r\n      // font-weight: 600;\r\n      color: $theme-color;\r\n    }\r\n  }\r\n}\r\n.lf-link--primary {\r\n  a {\r\n    color: $theme-color;\r\n    &:hover {\r\n      color: lighten($theme-color, $lf-link-lighten-amount);\r\n    }\r\n  }\r\n}\r\n.lf-link--success {\r\n  a {\r\n    color: $success-color;\r\n    &:hover {\r\n      color: lighten($success-color, $lf-link-lighten-amount);\r\n    }\r\n  }\r\n}\r\n.lf-link--danger {\r\n  a {\r\n    color: $danger-color;\r\n    &:hover {\r\n      color: lighten($danger-color, $lf-link-lighten-amount);\r\n    }\r\n  }\r\n}\r\n.lf-link--warning {\r\n  a {\r\n    color: $warning-color;\r\n    &:hover {\r\n      color: lighten($warning-color, $lf-link-lighten-amount);\r\n    }\r\n  }\r\n}\r\n.lf-link--info {\r\n  a {\r\n    color: $info-color;\r\n    &:hover {\r\n      color: lighten($info-color, $lf-link-lighten-amount);\r\n    }\r\n  }\r\n}\r\n.lf-link.is-disabled {\r\n  cursor: not-allowed;\r\n  a,\r\n  a:hover {\r\n    color: rgba($lf-text-color, 0.8);\r\n    text-decoration: none;\r\n    pointer-events: none;\r\n  }\r\n}\r\n.lf-link--primary.is-disabled {\r\n  cursor: not-allowed;\r\n  a,\r\n  a:hover {\r\n    color: rgba($theme-color, 0.8);\r\n    text-decoration: none;\r\n    pointer-events: none;\r\n  }\r\n}\r\n.lf-link--success.is-disabled {\r\n  cursor: not-allowed;\r\n  a,\r\n  a:hover {\r\n    color: rgba($success-color, 0.8);\r\n    text-decoration: none;\r\n    pointer-events: none;\r\n  }\r\n}\r\n.lf-link--warning.is-disabled {\r\n  cursor: not-allowed;\r\n  a,\r\n  a:hover {\r\n    color: rgba($warning-color, 0.8);\r\n    text-decoration: none;\r\n    pointer-events: none;\r\n  }\r\n}\r\n.lf-link--danger.is-disabled {\r\n  cursor: not-allowed;\r\n  a,\r\n  a:hover {\r\n    color: rgba($danger-color, 0.8);\r\n    text-decoration: none;\r\n    pointer-events: none;\r\n  }\r\n}\r\n.lf-link--info.is-disabled {\r\n  cursor: not-allowed;\r\n  a,\r\n  a:hover {\r\n    color: rgba($info-color, 0.8);\r\n    text-decoration: none;\r\n    pointer-events: none;\r\n  }\r\n}\r\n.lf-link.is-no-underline {\r\n  a,\r\n  a:hover {\r\n    text-decoration: none;\r\n  }\r\n}\r\n</style>\r\n",
    "<script setup>\r\nimport { computed, ref } from 'vue'\r\n\r\ndefineOptions({\r\n  name: 'lf-progress'\r\n})\r\n\r\nconst props = defineProps({\r\n  percentage: {\r\n    type: Number,\r\n    default: 90\r\n  },\r\n  type: {\r\n    type: String,\r\n    default: 'line'\r\n  },\r\n  status: {\r\n    type: String,\r\n    default: 'primary'\r\n  },\r\n  showTextOutside: {\r\n    type: Boolean,\r\n    default: false\r\n  },\r\n  showTextInside: {\r\n    type: Boolean,\r\n    default: false\r\n  },\r\n  strokeWidth: {\r\n    type: Number,\r\n    default: 6\r\n  },\r\n  color: {\r\n    // 接收一个数组或者函数\r\n    type: [Array, Function],\r\n    default: null\r\n  },\r\n  // 渐变色进度条\r\n  linearColor: {\r\n    type: Array,\r\n    default: null\r\n  },\r\n  indeterminate: {\r\n    type: Boolean,\r\n    default: false\r\n  }\r\n})\r\n\r\n// 处理传入的百分比，不能大于100和小于0\r\nconst strokePercentage = computed(() => {\r\n  if (props.percentage > 100) {\r\n    return 100\r\n  } else if (props.percentage < 0) {\r\n    return 0\r\n  } else {\r\n    return props.percentage.toFixed(0)\r\n  }\r\n})\r\n\r\n// 根据传入的百分比计算出偏移量\r\nconst strokeDashoffset = computed(() => {\r\n  return (((100 - strokePercentage.value) / 100) * 314).toString()\r\n})\r\n\r\nconst svg = ref(null)\r\n\r\n// 计算当前进度条的颜色\r\nconst currentColor = computed(() => {\r\n  let colorStr = undefined\r\n  // console.log(strokePercentage)\r\n  // 1. 传入的是数组\r\n  if (props.color instanceof Array) {\r\n    props.color.forEach((c) => {\r\n      if (strokePercentage.value >= c.percentage) {\r\n        colorStr = c.color\r\n      }\r\n    })\r\n    colorStr = !colorStr ? props.color[0].color : colorStr\r\n  } else if (props.color instanceof Function) {\r\n    colorStr = props.color(strokePercentage.value)\r\n  }\r\n  return colorStr\r\n})\r\n\r\n// 采用渐变色进度条的颜色\r\nconst linearCurrentColor = computed(() => {\r\n  let colorStr = ''\r\n  if (props.linearColor instanceof Array) {\r\n    // 以数组形式传递\r\n    colorStr = props.linearColor.join(',')\r\n  }\r\n  // console.log(`linear-gradient(to right, ${colorStr})`)\r\n  return `linear-gradient(to right, ${colorStr})`\r\n})\r\n\r\nconst linearGradientHTML = computed(() => {\r\n  // 用户传入的渐变色数组格式 ['#4BC0C8', '#C779D0', '#FEAC5E']\":\r\n  const stops = props.linearColor.map((color, index) => {\r\n    return `<stop offset=\"${(index / (props.linearColor.length - 1)) * 100}%\" stop-color=\"${color}\"/>`\r\n  })\r\n  return `<linearGradient id=\"linear-gradient\" x1=\"0%\" y1=\"0%\" x2=\"100%\" y2=\"0%\">${stops.join('')}</linearGradient>`\r\n})\r\n</script>\r\n\r\n<template>\r\n  <!-- 线性 -->\r\n  <div v-if=\"type === 'line'\" class=\"lf-progress__line\" :style=\"{ height: `${strokeWidth}px` }\">\r\n    <div class=\"lf-progress__line--bgc\" :style=\"{ 'border-radius': `${strokeWidth / 2}px` }\">\r\n      <div\r\n        class=\"lf-progress__line--progress\"\r\n        :style=\"{\r\n          width: `${strokePercentage}%`,\r\n          'border-radius': `${strokeWidth / 2}px`,\r\n          'background-color': color ? currentColor : '',\r\n          background: linearColor ? linearCurrentColor : ''\r\n        }\"\r\n        :class=\"[\r\n          `lf-progress__line--progress--${status}`,\r\n          { 'lf-progress__line--progress--animation': indeterminate }\r\n        ]\"\r\n      >\r\n        <span class=\"lf-progress__line--inside\">\r\n          <slot name=\"inside\">\r\n            <span v-if=\"showTextInside\">{{ strokePercentage }} %</span>\r\n          </slot>\r\n        </span>\r\n      </div>\r\n    </div>\r\n    <span class=\"lf-progress__line--outside\">\r\n      <slot name=\"outside\">\r\n        <span v-if=\"showTextOutside\">{{ strokePercentage }} %</span>\r\n      </slot>\r\n    </span>\r\n  </div>\r\n  <!-- 环形 -->\r\n  <div class=\"lf-progress__circle\" v-if=\"type === 'circle'\">\r\n    <svg width=\"126\" height=\"126\" view-box=\"0 0 126 126\" ref=\"svg\">\r\n      <!-- 灰色背景圆环 -->\r\n      <circle\r\n        cx=\"63\"\r\n        cy=\"63\"\r\n        r=\"50\"\r\n        class=\"lf-progress__circle--bgc\"\r\n        :stroke-width=\"strokeWidth\"\r\n      ></circle>\r\n      <!-- 实际上的进度条圆环 -->\r\n      <defs v-html=\"linearGradientHTML\"></defs>\r\n      <circle\r\n        cx=\"63\"\r\n        cy=\"63\"\r\n        r=\"50\"\r\n        class=\"lf-progress__circle--progress\"\r\n        :stroke=\"linearColor ? 'url(#linear-gradient)' : color ? currentColor : ''\"\r\n        :stroke-width=\"strokeWidth\"\r\n        stroke-dasharray=\"314 314\"\r\n        :stroke-dashoffset=\"strokeDashoffset\"\r\n        :class=\"[\r\n          `lf-progress__circle--progress--${!color ? status : ''}`,\r\n          { 'lf-progress__circle--progress--animation': indeterminate }\r\n        ]\"\r\n      ></circle>\r\n    </svg>\r\n    <!-- 提供插槽 -->\r\n    <div class=\"lf-progress__circle-showtext\">\r\n      <slot>\r\n        <div>{{ strokePercentage }} %</div>\r\n      </slot>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<style lang=\"scss\" scoped>\r\n@import './assets/styles/common.scss';\r\n$lf-progress-bg-color: #f5f7fa;\r\n$lf-progress__line--bgc-height: 6px;\r\n// 线性进度条\r\n.lf-progress__line {\r\n  width: 100%;\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 10px;\r\n  font-size: 14px;\r\n  color: $lf-text-color;\r\n  .lf-progress__line--bgc {\r\n    background-color: $lf-progress-bg-color;\r\n    width: 85%;\r\n    height: 100%;\r\n    border-radius: calc($lf-progress__line--bgc-height / 2);\r\n    overflow: hidden;\r\n  }\r\n  .lf-progress__line--progress {\r\n    position: relative;\r\n    background-color: $theme-color;\r\n    height: 100%;\r\n    // width: 50px;\r\n    border-radius: calc($lf-progress__line--bgc-height / 2);\r\n    transition: all 0.5s;\r\n    display: flex;\r\n    justify-content: flex-end;\r\n    align-items: center;\r\n  }\r\n}\r\n.lf-progress__line--progress.lf-progress__line--progress--primary {\r\n  background-color: $theme-color;\r\n}\r\n.lf-progress__line--progress.lf-progress__line--progress--success {\r\n  background-color: $success-color;\r\n}\r\n.lf-progress__line--progress.lf-progress__line--progress--warning {\r\n  background-color: $warning-color;\r\n}\r\n.lf-progress__line--progress.lf-progress__line--progress--danger {\r\n  background-color: $danger-color;\r\n}\r\n\r\n.lf-progress__line--inside {\r\n  color: #fff;\r\n  font-size: 9px;\r\n  margin-right: 5px;\r\n}\r\n.lf-progress__line--outside {\r\n  color: $lf-text-color;\r\n  font-size: 14px;\r\n}\r\n// 直线进度条的动画\r\n@keyframes lf-progress--line--animation {\r\n  0% {\r\n    right: 100%;\r\n  }\r\n  100% {\r\n    // transform: ;\r\n    right: -100%;\r\n  }\r\n}\r\n\r\n.lf-progress__line--progress--animation {\r\n  animation: lf-progress--line--animation 1.5s ease infinite;\r\n}\r\n\r\n// 环形进度条\r\n.lf-progress__circle {\r\n  position: relative;\r\n  display: inline-flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  // background-color: pink;\r\n}\r\n.lf-progress__circle--progress {\r\n  transition: all 0.5s;\r\n  fill: none;\r\n  // stroke: $theme-color;\r\n  // stroke-width: 6; // 进度条的宽度\r\n  // stroke-dasharray: 314, 314; // dash表示虚线，stroke-dash表示将边框设置为虚线\r\n  // // stroke-dasharray表示这个属性可以接受多个值，实际上一般是接收两个值\r\n  // stroke-dashoffset: 100; // 边框的偏移距离，设置偏移位置来模拟百分比\r\n  stroke-linecap: round; // 圆角属性\r\n  // 更改圆环转动的锚点\r\n  transform-origin: center;\r\n  // 让圆环从12点方向开始转动\r\n  transform: rotate(-90deg);\r\n}\r\n.lf-progress__circle--progress.lf-progress__circle--progress--primary {\r\n  stroke: $theme-color;\r\n}\r\n.lf-progress__circle--progress.lf-progress__circle--progress--success {\r\n  stroke: $success-color;\r\n}\r\n.lf-progress__circle--progress.lf-progress__circle--progress--warning {\r\n  stroke: $warning-color;\r\n}\r\n.lf-progress__circle--progress.lf-progress__circle--progress--danger {\r\n  stroke: $danger-color;\r\n}\r\n.lf-progress__circle--bgc {\r\n  fill: none;\r\n  stroke: $lf-progress-bg-color;\r\n  // stroke-width: 6;\r\n}\r\n\r\n.lf-progress__circle-showtext {\r\n  position: absolute;\r\n}\r\n\r\n// 环形进度条动画\r\n@keyframes lf-progress--circle--animation {\r\n  0% {\r\n    transform: rotate(-90deg);\r\n  }\r\n  100% {\r\n    transform: rotate(270deg);\r\n  }\r\n}\r\n\r\n.lf-progress__circle--progress--animation {\r\n  animation: lf-progress--circle--animation 1.2s linear infinite;\r\n}\r\n</style>\r\n",
    "<script setup>\r\nimport { inject } from 'vue'\r\ndefineOptions({\r\n  name: 'lf-radio'\r\n})\r\n\r\nconst props = defineProps({\r\n  value: {\r\n    type: [Array, String, Number],\r\n    default: ''\r\n  },\r\n  disabled: {\r\n    type: Boolean,\r\n    default: false\r\n  }\r\n})\r\n\r\nconst v = inject('r_value')\r\n\r\nconst update_v = inject('update_v')\r\n\r\nconst handleUpdateV = () => {\r\n  if (props.disabled) return\r\n  update_v(props.value)\r\n}\r\n</script>\r\n\r\n<template>\r\n  <span class=\"lf-radio\" @click=\"handleUpdateV\">\r\n    <span\r\n      class=\"lf-radio__input\"\r\n      :class=\"[{ 'is-checked': props.value === v }, { 'is-disabled': props.disabled }]\"\r\n    >\r\n      <input type=\"radio\" class=\"lf-radio__input--orginal\" :value=\"v\" />\r\n    </span>\r\n    <span\r\n      class=\"lf-radio__label\"\r\n      :class=\"[{ 'is-checked': props.value === v }, { 'is-disabled': props.disabled }]\"\r\n      ><slot></slot\r\n    ></span>\r\n  </span>\r\n</template>\r\n\r\n<style lang=\"scss\" scoped>\r\n$lf-border-color: #eaecf0;\r\n$lf-text-color: #606266;\r\n$theme-color: #8e43e7;\r\n.lf-radio {\r\n  display: inline-flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n}\r\n.lf-radio__input {\r\n  // 画一个小圆\r\n  display: inline-flex;\r\n  width: 14px;\r\n  height: 14px;\r\n  border-radius: 50%;\r\n  border: 1px solid $lf-border-color;\r\n  justify-content: center;\r\n  align-items: center;\r\n  transition: all 0.4s;\r\n  cursor: pointer;\r\n  &:hover {\r\n    border-color: $theme-color;\r\n  }\r\n}\r\n.lf-radio__input.is-disabled {\r\n  background-color: #f5f7fa;\r\n  border: 1px solid $lf-border-color;\r\n  cursor: not-allowed;\r\n}\r\n.lf-radio__input--orginal {\r\n  opacity: 0;\r\n  position: absolute;\r\n  z-index: -1;\r\n}\r\n.lf-radio__input.is-checked {\r\n  background-color: $theme-color;\r\n  border: 1px solid $theme-color;\r\n  &::after {\r\n    display: block;\r\n    content: '';\r\n    width: 4px;\r\n    height: 4px;\r\n    border-radius: 50%;\r\n    background-color: #fff;\r\n  }\r\n}\r\n.lf-radio__input.is-checked.is-disabled {\r\n  background-color: #f5f7fa;\r\n  border: 1px solid $lf-border-color;\r\n  cursor: not-allowed;\r\n  &::after {\r\n    display: block;\r\n    background-color: #a8abb2;\r\n  }\r\n}\r\n.lf-radio__label.is-disabled,\r\n.lf-radio__label.is-checked.is-disabled {\r\n  color: #a8abb2;\r\n  cursor: not-allowed;\r\n}\r\n.lf-radio__label {\r\n  font-size: 14px;\r\n  color: $lf-text-color;\r\n  padding-left: 5px;\r\n  cursor: pointer;\r\n  transition: all 0.4s;\r\n}\r\n.lf-radio__label.is-checked {\r\n  color: $theme-color;\r\n}\r\n</style>\r\n",
    "import lfButton from './button.vue'\r\nimport lfCarousel from './carousel.vue'\r\nimport lfCarouselItem from './carouselItem.vue'\r\nimport lfCol from './col.vue'\r\nimport lfCollapse from './collapse.vue'\r\nimport lfCollapseItem from './collapseItem.vue'\r\nimport lfDialog from './dialog.vue'\r\nimport lfH from './h.vue'\r\nimport lfInput from './input.vue'\r\nimport lfLink from './link.vue'\r\nimport lfProgress from './progress.vue'\r\nimport lfRadio from './radio.vue'\r\nimport lfRadioGroup from './radioGroup.vue'\r\nimport lfRow from './row.vue'\r\nimport lfSwitch from './switch.vue'\r\nimport lfText from './text.vue'\r\n\r\nconst components = {\r\n  lfButton,\r\n  lfCarousel,\r\n  lfCarouselItem,\r\n  lfCol,\r\n  lfCollapse,\r\n  lfCollapseItem,\r\n  lfDialog,\r\n  lfH,\r\n  lfInput,\r\n  lfLink,\r\n  lfProgress,\r\n  lfRadio,\r\n  lfRadioGroup,\r\n  lfRow,\r\n  lfSwitch,\r\n  lfText\r\n}\r\nfunction install(Vue) {\r\n  const keys = Object.keys(components)\r\n  keys.forEach((name) => {\r\n    const component = components[name]\r\n    Vue.component(component.name || name, component)\r\n  })\r\n}\r\n\r\nexport default {\r\n  install,\r\n  ...components\r\n}\r\n",
    "<script setup>\r\nimport { provide, ref, onMounted } from 'vue'\r\ndefineOptions({\r\n  name: 'lf-radio-group'\r\n})\r\n\r\nconst props = defineProps({\r\n  modelValue: {\r\n    type: [Array, String, Boolean, Number],\r\n    default: ''\r\n  }\r\n})\r\n\r\nconst r_value = ref('')\r\n\r\nonMounted(() => {\r\n  r_value.value = props.modelValue\r\n})\r\n\r\nprovide('r_value', r_value)\r\n\r\nconst emits = defineEmits(['update:model-value'])\r\n\r\nconst updateModleValue = (newVal) => {\r\n  emits('update:model-value', newVal)\r\n  r_value.value = newVal\r\n}\r\n\r\nprovide('update_v', updateModleValue)\r\n</script>\r\n\r\n<template>\r\n  <div class=\"lf-radio-group\"><slot></slot></div>\r\n</template>\r\n\r\n<style lang=\"scss\" scoped>\r\n.lf-radio-group {\r\n  display: flex;\r\n  gap: 10px;\r\n}\r\n</style>\r\n",
    "<script setup>\r\nimport { computed, ref, provide } from 'vue'\r\n\r\ndefineOptions({\r\n  name: 'lf-row'\r\n})\r\n\r\nconst props = defineProps({\r\n  gap: {\r\n    type: Number,\r\n    default: 0\r\n  },\r\n  justify: {\r\n    type: String,\r\n    default: 'start'\r\n  },\r\n  align: {\r\n    type: String,\r\n    default: 'top'\r\n  }\r\n})\r\n\r\nconst justify_content = computed(() => {\r\n  const chooseList = ['start', 'end', 'space-between', 'space-around', 'space-evenly']\r\n  if (chooseList.includes(props.justify)) {\r\n    if (props.justify === 'start' || props.justify === 'end') {\r\n      return `flex${props.justify}`\r\n    }\r\n    return props.justify\r\n  }\r\n  return 'flex-start'\r\n})\r\n\r\nconst align_items = ref(props.align)\r\nprovide('align', align_items)\r\n</script>\r\n\r\n<template>\r\n  <div class=\"lf-row\" :style=\"{ gap: `${props.gap}px`, 'justify-content': justify_content }\">\r\n    <slot></slot>\r\n  </div>\r\n</template>\r\n\r\n<style lang=\"scss\" scoped>\r\n.lf-row {\r\n  width: 100%;\r\n  display: flex;\r\n  flex-direction: row;\r\n  align-items: center;\r\n}\r\n</style>\r\n",
    "<script setup>\r\nimport { ref } from 'vue'\r\ndefineOptions({\r\n  name: 'lfSwitch'\r\n})\r\n\r\nconst props = defineProps({\r\n  modelValue: {\r\n    type: Boolean,\r\n    default: false\r\n  },\r\n  onColor: {\r\n    type: String,\r\n    default: ''\r\n  },\r\n  offColor: {\r\n    type: String,\r\n    default: ''\r\n  },\r\n  size: {\r\n    type: String,\r\n    default: ''\r\n  },\r\n  name: {\r\n    type: String,\r\n    default: ''\r\n  },\r\n  activeText: {\r\n    type: String,\r\n    default: ''\r\n  },\r\n  inactiveText: {\r\n    type: String,\r\n    default: ''\r\n  },\r\n  inlinePrompt: {\r\n    type: Boolean,\r\n    default: false\r\n  },\r\n  disabled: {\r\n    type: Boolean,\r\n    default: false\r\n  }\r\n})\r\n\r\nconst emits = defineEmits(['update:modelValue'])\r\n\r\nconst switchCore = ref(null)\r\n\r\nconst changeSwitchColor = () => {\r\n  // 用户必须传入了这两个参数才会生效\r\n  if (!props.modelValue && props.offColor) {\r\n    switchCore.value.style.backgroundColor = props.offColor\r\n  } else if (props.modelValue && props.onColor) {\r\n    switchCore.value.style.backgroundColor = props.onColor\r\n  }\r\n}\r\n\r\n// 修改按钮的状态\r\nconst handleChecked = () => {\r\n  changeSwitchColor()\r\n  emits('update:modelValue', !props.modelValue)\r\n  // console.log(props.modelValue)\r\n  // 使用JS来修改背景颜色\r\n}\r\n</script>\r\n\r\n<template>\r\n  <span class=\"lf-switch\" :class=\"[{ 'is-disabled': disabled }]\">\r\n    <!-- 设置禁用状态 -->\r\n    <!-- 左侧提示文字 -->\r\n    <!-- 当用户输出提示词并且不选择显示在点内时才展示 -->\r\n    <span\r\n      class=\"lf-switch__label-text\"\r\n      :class=\"[\r\n        { 'is-checked': props.modelValue },\r\n        { 'lf-switch--large': props.size === 'large' },\r\n        { 'lf-switch--small': props.size === 'small' }\r\n      ]\"\r\n      v-if=\"inactiveText && !inlinePrompt\"\r\n      >{{ inactiveText }}</span\r\n    >\r\n    <!-- 中间选择器部分 -->\r\n    <span\r\n      ref=\"switchCore\"\r\n      class=\"lf-switch__core\"\r\n      @click=\"handleChecked\"\r\n      :class=\"[\r\n        { 'is-checked': props.modelValue },\r\n        { 'lf-switch--large': props.size === 'large' },\r\n        { 'lf-switch--small': props.size === 'small' }\r\n      ]\"\r\n    >\r\n      <!-- 用户选择内嵌提示词时 -->\r\n      <div\r\n        v-if=\"(activeText || inactiveText) && inlinePrompt\"\r\n        class=\"lf-switch__inline-prompt\"\r\n        :class=\"[\r\n          { 'is-checked': props.modelValue },\r\n          { 'lf-switch--large': props.size === 'large' },\r\n          { 'lf-switch--small': props.size === 'small' }\r\n        ]\"\r\n      >\r\n        {{ !modelValue ? activeText : inactiveText }}\r\n      </div>\r\n      <!-- 小圆圈 -->\r\n      <div\r\n        class=\"lf-switch__action\"\r\n        :class=\"[\r\n          { 'is-checked': props.modelValue },\r\n          { 'lf-switch--large': props.size === 'large' },\r\n          { 'lf-switch--small': props.size === 'small' }\r\n        ]\"\r\n      ></div>\r\n    </span>\r\n    <!-- 右侧提示文字模块 -->\r\n    <span\r\n      class=\"lf-switch__label-text\"\r\n      :class=\"[\r\n        { 'is-checked': !props.modelValue },\r\n        { 'lf-switch--large': props.size === 'large' },\r\n        { 'lf-switch--small': props.size === 'small' }\r\n      ]\"\r\n      v-if=\"activeText && !inlinePrompt\"\r\n      >{{ activeText }}</span\r\n    >\r\n  </span>\r\n</template>\r\n\r\n<style lang=\"scss\" scoped>\r\n@import './assets/styles/common.scss';\r\n$lf-switch-border-color: #dcdfe6;\r\n$lf-switch-off-color: #dcdfe6;\r\n.lf-switch {\r\n  position: relative;\r\n  display: inline-flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  gap: 5px;\r\n  overflow: hidden;\r\n}\r\n\r\n.lf-switch.is-disabled {\r\n  &::after {\r\n    content: '';\r\n    position: absolute;\r\n    width: 100%;\r\n    height: 100%;\r\n    background-color: rgba(#fff, 0.5);\r\n    cursor: not-allowed;\r\n  }\r\n}\r\n.lf-switch__core {\r\n  position: relative;\r\n  display: inline-flex;\r\n  box-sizing: border-box;\r\n  min-width: 40px;\r\n  height: 20px;\r\n  border: 1px solid $lf-switch-border-color;\r\n  border-radius: 10px;\r\n  background-color: $lf-switch-off-color;\r\n  align-items: center;\r\n  padding: 2px;\r\n  cursor: pointer;\r\n  transition: all 0.3s;\r\n  .lf-switch__action {\r\n    position: absolute;\r\n    left: 2px;\r\n    transition: all 0.5s;\r\n    height: 16px;\r\n    width: 16px;\r\n    border-radius: 10px;\r\n    background-color: white;\r\n  }\r\n  .lf-switch__action.is-checked {\r\n    left: calc(100% - 18px);\r\n  }\r\n}\r\n\r\n// 背景颜色的大小控制\r\n.lf-switch__core.is-checked {\r\n  background-color: $theme-color;\r\n}\r\n\r\n.lf-switch__core.lf-switch--large {\r\n  min-width: 50px;\r\n  height: 24px;\r\n  border-radius: 12px;\r\n}\r\n.lf-switch__core.lf-switch--small {\r\n  min-width: 30px;\r\n  height: 16px;\r\n  border-radius: 8px;\r\n}\r\n\r\n// 小圆圈的大小控制\r\n.lf-switch__core .lf-switch__action.lf-switch--large {\r\n  width: 18px;\r\n  height: 18px;\r\n}\r\n.lf-switch__core .lf-switch__action.lf-switch--small {\r\n  width: 12px;\r\n  height: 12px;\r\n}\r\n.lf-switch__core .lf-switch__action.lf-switch--large.is-checked {\r\n  left: calc(100% - 20px);\r\n}\r\n.lf-switch__core .lf-switch__action.lf-switch--small.is-checked {\r\n  left: calc(100% - 14px);\r\n}\r\n\r\n// 写在文本左右的提示文字\r\n.lf-switch__label-text {\r\n  transition: color 0.5s;\r\n  font-size: 14px;\r\n  font-weight: 150;\r\n  color: $theme-color;\r\n}\r\n.lf-switch__label-text.is-checked {\r\n  color: $lf-text-color;\r\n}\r\n\r\n.lf-switch__label-text.lf-switch--large {\r\n  font-size: 16px;\r\n}\r\n\r\n.lf-switch__label-text.lf-switch--small {\r\n  font-size: 12px;\r\n}\r\n\r\n// 写在里面的提示词\r\n.lf-switch__inline-prompt {\r\n  font-size: 12px;\r\n  margin-left: 20px;\r\n  margin-right: 4px;\r\n  color: #fff;\r\n}\r\n.lf-switch__inline-prompt.lf-switch--large {\r\n  margin-left: 22px;\r\n  margin-right: 4px;\r\n  font-size: 14px;\r\n}\r\n.lf-switch__inline-prompt.lf-switch--small {\r\n  margin-left: 16px;\r\n  margin-right: 4px;\r\n  font-size: 10px;\r\n}\r\n.lf-switch__inline-prompt.is-checked {\r\n  margin-left: 4px;\r\n  margin-right: 20px;\r\n}\r\n.lf-switch__inline-prompt.lf-switch--large.is-checked {\r\n  margin-left: 4px;\r\n  margin-right: 22px;\r\n}\r\n.lf-switch__inline-prompt.lf-switch--small.is-checked {\r\n  margin-left: 4px;\r\n  margin-right: 16px;\r\n}\r\n</style>\r\n",
    "<script setup>\r\ndefineOptions({\r\n  name: 'lf-text'\r\n})\r\n\r\nconst props = defineProps({\r\n  size: {\r\n    type: String,\r\n    default: 'default'\r\n  },\r\n  type: {\r\n    type: String,\r\n    default: 'default'\r\n  },\r\n  tag: {\r\n    type: String,\r\n    default: 'span'\r\n  },\r\n  truncated: {\r\n    type: Boolean,\r\n    default: false\r\n  },\r\n  lineClamp: {\r\n    type: [Number, String],\r\n    default: 0\r\n  }\r\n})\r\n</script>\r\n\r\n<template>\r\n  <component\r\n    :is=\"tag\"\r\n    class=\"lf-text\"\r\n    :class=\"[\r\n      `lf-text__font-size--${props.size}`,\r\n      `lf-text--${props.type}`,\r\n      { 'is-truncated': truncated },\r\n      { 'is-line-clamp': lineClamp !== 0 }\r\n    ]\"\r\n    :style=\"{ '-webkit-line-clamp': Number(lineClamp) > 0 ? lineClamp : 'auto' }\"\r\n    ><slot></slot\r\n  ></component>\r\n</template>\r\n\r\n<style lang=\"scss\" scoped>\r\n@import './assets/styles/common.scss';\r\n$lf-text--large: 16px;\r\n$lf-text--default: 14px;\r\n$lf-text--small: 12px;\r\n.lf-text {\r\n  line-height: 25px;\r\n  font-weight: 300;\r\n  overflow-wrap: break-word;\r\n}\r\nb.lf-text {\r\n  font-weight: 700;\r\n}\r\n// 控制文本大小\r\n.lf-text__font-size--default {\r\n  font-size: $lf-text--default;\r\n}\r\n.lf-text__font-size--large {\r\n  font-size: $lf-text--large;\r\n}\r\n.lf-text__font-size--small {\r\n  font-size: $lf-text--small;\r\n}\r\n// 控制文本样式\r\n.lf-text--default {\r\n  color: $lf-text-color;\r\n}\r\n.lf-text--primary {\r\n  color: $theme-color;\r\n}\r\n.lf-text--success {\r\n  color: $success-color;\r\n}\r\n.lf-text--warning {\r\n  color: $warning-color;\r\n}\r\n.lf-text--info {\r\n  color: $info-color;\r\n}\r\n.lf-text--danger {\r\n  color: $danger-color;\r\n}\r\n// 控制文本是否超出省略\r\n.lf-text.is-truncated {\r\n  display: inline-block;\r\n  max-width: 100%;\r\n  text-overflow: ellipsis;\r\n  white-space: nowrap;\r\n  overflow: hidden;\r\n}\r\n// 多行文本超出省略\r\n.lf-text.is-line-clamp {\r\n  display: -webkit-box;\r\n  -webkit-box-orient: vertical;\r\n  overflow: hidden;\r\n}\r\n</style>\r\n"
  ],
  "names": [
    "props",
    "__props",
    "emits",
    "__emit",
    "wait",
    "computed",
    "handleClick",
    "fun",
    "timeId",
    "args",
    "e",
    "iconName",
    "iconPosition",
    "length",
    "ref",
    "elements",
    "thisCarousel",
    "onMounted",
    "active",
    "changeActive",
    "direction",
    "trigger",
    "setLeaveEffect",
    "setEnterEffect",
    "index",
    "timer",
    "isTouched",
    "handleTouch",
    "setActiveItem",
    "align",
    "inject",
    "align_items",
    "collapse",
    "newActive",
    "activeName_",
    "accordion_",
    "provide",
    "activeName",
    "accordion",
    "content",
    "active_not_accordion",
    "handleFold",
    "h",
    "handleClose",
    "handleOpen",
    "lfDialog",
    "vue",
    "newValue",
    "dialog",
    "originalPosition",
    "dragOffset",
    "startDragging",
    "event",
    "drag",
    "stopDragging",
    "colorStr",
    "color_str",
    "item",
    "styles",
    "handleInput",
    "inputFocus",
    "isFocus",
    "makeFocus",
    "makeNoFocus",
    "handleClear",
    "handleFocus",
    "handleBlur",
    "passwordVisible",
    "handlePassword",
    "paddingRight",
    "right",
    "textarea",
    "debounce_",
    "timerId",
    "minHeight",
    "handleAutoSize",
    "maxHeight",
    "newHeight",
    "handleTextarea",
    "strokePercentage",
    "strokeDashoffset",
    "svg",
    "currentColor",
    "c",
    "linearCurrentColor",
    "linearGradientHTML",
    "color",
    "v",
    "update_v",
    "handleUpdateV",
    "components",
    "lfButton",
    "lfCarousel",
    "lfCarouselItem",
    "lfCol",
    "lfCollapse",
    "lfCollapseItem",
    "lfH",
    "lfInput",
    "lfLink",
    "lfProgress",
    "lfRadio",
    "r_value",
    "updateModleValue",
    "newVal",
    "justify_content",
    "switchCore",
    "changeSwitchColor",
    "handleChecked",
    "install",
    "Vue",
    "name",
    "component"
  ],
  "mappings": "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"
}
